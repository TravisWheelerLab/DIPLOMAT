name: Auto Tag New Releases


on:
  push:
    branches:
      - main


jobs:
  create-new-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: "${{ secrets.COMMIT_KEY }}"
          fetch-depth: 0
      - name: Get Latest Tag
        id: get-latest-tag
        uses: actions-ecosystem/action-get-latest-tag@v1.6.0
        with:
          semver_only: true
          with_initial_version: false
      - name: Code vs Releases Version Check
        id: release-info
        run: |
          RELEASE_VERSION=$(echo $LATEST_RELEASE | tr -d "v ")
          VERSION=$(cat diplomat/__init__.py | grep "__version__" | cut -d "=" -f 2 | tr -d '" ')
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]
            then
              echo "$VERSION is not a valid version!"
              exit 1
          fi
          PROPOSED_TAG="v$VERSION"
          echo "Python package version: $VERSION"
          echo "Github release version: $RELEASE_VERSION"
          echo "Next proposed tag: $PROPOSED_TAG"
          echo "PYTHON_VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "NEXT_TAG=$PROPOSED_TAG" >> "$GITHUB_OUTPUT"
        env:
          LATEST_RELEASE: ${{ steps.get-latest-tag.outputs.tag }}
      - name: Create new tag on version mismatch.
        uses: actions-ecosystem/action-push-tag@v1
        if: ${{ steps.release-info.outputs.RELEASE_VERSION != steps.release-info.outputs.PYTHON_VERSION }}
        with:
          tag: ${{ steps.release-info.outputs.NEXT_TAG }}
          message: ${{ github.event.head_commit.message }}

